import config
import telebot
import sqlite3
from datetime import date, timedelta
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
import pandas as pd
import os
import logging
import matplotlib.pyplot as plt


try:
    os.system('python SendEmailLogs.py 1')
    os.remove('Bot.log')
    logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s',
                        level=logging.INFO,
                        filename='Bot.log'
                        )
    # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    bot = telebot.TeleBot(config.token)

    # —Å–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    mood_list = ['awfull', 'bad', 'okey', 'good', 'joyful']
    mood_dict = {'awfull': 1, 'bad': 2, 'okey': 3, 'good': 4, 'joyful': 5}
    mood_emoji_dict = {'1': '‚òπ', '2': 'üôÅ', '3': 'üòê', '4': 'üôÇ', '5': 'üòÄ', '-':'-'}


    #–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    back_button = 'menu'

    #–º–µ–Ω—é
    menu_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    menu_keyboard.row('check', 'analytics', 'check old')

    #–≤–∏–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    mood_keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    mood_keyboard.row(*mood_list).add(back_button)

    #–≤–∏–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    analyse_keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    analyse_keyboard.row('Simple row', 'AI analyse', 'Chart', 'Pie Chart').add(back_button)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    interval_keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    interval_keyboard.row('–∑–∞ 10 –¥–Ω–µ–π', '–∑–∞ 30 –¥–Ω–µ–π', '–∑–∞ 90 –¥–Ω–µ–π', '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è').add(back_button)

    #–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–±–∞–≤–∏—Ç—Ç—å –∫–æ–º–º–µ–Ω—Ç
    comment_keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    comment_keyboard.row('–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤')

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∑—ã–≤–∞–º–∏
    feedback_keyboard = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    feedback_keyboard.row('–ê–Ω–æ–Ω–∏–º 1, 22 –≥–æ–¥–∞, —é—Ä–∏—Å—Ç').add(back_button)


    # —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç—É
    conn = sqlite3.connect('mood.db')
    cur = conn.cursor()
    cur.execute('''
    CREATE TABLE IF NOT EXISTS mood_status (
       userid INT,
       date TEXT,
       status TEXT,
       commentary TEXT,
       primary key (userid, date)
        )
    ''')
    conn.commit()


    # –æ—Ç–≤–µ—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ \—Å–ª–æ–≤–æ
    #–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É
    @bot.message_handler(commands=['start', 'help'])
    def start_message(message):
        bot.send_message(message.chat.id,
                         '''
                         MoodCheckingBot v1.1
                         –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.
                         –°—É—Ç—å –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–¥–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–∞–∫–æ–µ —É —Ç–µ–±—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.
                         –ü–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —ç—Ç–∏–º —Å—Ç–∞—Ç—É—Å–∞–º.
                         –û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ –µ—Å–ª–∏ –Ω–µ–¥–µ–ª—é –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–æ –Ω–∞–¥–æ –±—Ä–∞—Ç—å –æ—Ç–ø—É—Å–∫, –∞ –µ—Å–ª–∏ 3 –Ω–µ–¥–µ–ª–∏ - —É–≤–æ–ª–Ω—è—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã.
                         –≠—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –º–æ–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –≤—ã–∑–≤–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help
                         –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:
                         - check - –∑–∞–ø–∏—Å–∞—Ç—å/–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å;
                         - analytics - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É;
                         - check old - –∏–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—à–ª—ã–µ –¥–Ω–∏.
                         –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–≥—Ä—É–∑–∏—Ç—å–¥ –¥–∞–Ω–Ω—ã–µ –≤ CSV —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /export_csv.
                         –û—Ç–∑—ã–≤—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - /feedbacks
                         ''', reply_markup=menu_keyboard)

    #—Ä–µ—Å—Ç–∞—Ä—Ç
    @bot.message_handler(commands=['restart', 'rs'])
    def start_message(message):
        bot.send_message(message.chat.id, 'Choose action', reply_markup=menu_keyboard)

    #—ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    @bot.message_handler(commands=['export_csv'])
    def export_data(message):
        user_id = message.from_user.id

        conn = sqlite3.connect('mood.db')
        df = pd.read_sql_query(f'''
                        SELECT 
                        date, 
                        status, 
                        case when commentary = '' then null else commentary end commentary
                        FROM mood_status
                        where userid = {user_id}
                        ''', conn)
        df.to_csv('MyMoodTracker.csv', sep=';', index=False, encoding='utf-8')
        file = open('MyMoodTracker.csv', encoding='utf8')
        bot.send_document(message.chat.id, file, reply_markup=menu_keyboard)

    #–æ—Ç–∑—ã–≤—ã
    @bot.message_handler(commands=['feedbacks'])
    def choose_feedbacker(message):
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ä–µ–∞–ª–∞—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —é–∑–µ—Ä–æ–≤',
                               reply_markup=feedback_keyboard)
        bot.register_next_step_handler(msg, send_text)



    # —Ä–µ–∞–∫—Ü–∏ –±–æ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    @bot.message_handler(content_types=['text'])
    def send_text(message):
        if message.text.lower() == 'check':
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –≤ —Ü–µ–ª–æ–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
                                   reply_markup=mood_keyboard)
            bot.register_next_step_handler(msg, check_today_mood)
        elif message.text.lower() == 'analytics':
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π AI –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
                                   reply_markup=interval_keyboard)
            bot.register_next_step_handler(msg, get_interval)
        elif message.text.lower() == 'check old':
            calendar, step = DetailedTelegramCalendar(max_date=date.today()).build()
            bot.send_message(message.chat.id, f"Select {LSTEP[step]}", reply_markup=calendar)
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –°–ù–ê–ß–ê–õ–ê –î–ê–¢–£, –ø–æ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–æ –≤ —Ç–æ—Ç –¥–µ–Ω—å',
                                   reply_markup=mood_keyboard)
            bot.register_next_step_handler(msg, check_old_mood)

        elif message.text.lower() == 'menu':
            bot.send_message(message.chat.id, 'Choose action', reply_markup=menu_keyboard)

        elif message.text == '–ì—é–Ω–µ–ª—å, 22 –≥–æ–¥–∞, —é—Ä–∏—Å—Ç':
            bot.send_message(message.chat.id,
                             '''
                             –ì—é–Ω–µ–ª—å:
                             –ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –ì—é–Ω–µ–ª—å, —è —é—Ä–∏—Å—Ç, –∑–∞–∫–æ–Ω—á–∏–ª–∞ –±–∞–∫–∞–ª–∞–≤—Ä –ú–ì–Æ–ê –±–µ–∑ 4... –∏ 3 –∏ 2 —Ç–æ–∂–µ –Ω–µ –±—ã–ª–æ. 
                             –°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –∫–æ–Ω—Ç–æ—Ä–µ –∏ —É—á—É—Å—å –Ω–∞ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–µ. –ï—â–µ —è —É—á—É –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –í –æ–±—â–µ–º, –æ–±—ã—á–Ω–∞—è –∂–∏–∑–Ω—å –º–æ–ª–æ–¥–æ–π, –∫—Ä–∞—Å–∏–≤–æ–π, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏ —É—Å–ø–µ—à–Ω–æ–π –ª–µ–¥–∏.
                             –ù–æ –≤—Å–µ –∂–µ —Ä–∞–Ω—å—à–µ —è –¥—É–º–∞–ª–∞, —á—Ç–æ –º–æ—è –∂–∏–∑–Ω—å –Ω–µ –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–∞—è, –Ω–æ –≤ –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç –º–Ω–µ –ø–æ–ø–∞–ª—Å—è –±–∏–ª–±–æ—Ä–¥ —Å —Ä–µ–∫–ª–∞–º–æ–π –±–æ—Ç–∞ MoodCheckingBot, —è –ø–æ–¥—É–º–∞–ª–∞: 
                             - –ê —á–µ, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å.
                             –í—ã –∑–Ω–∞–µ—Ç–µ, –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –º–æ—è –∂–∏–∑–Ω—å –ø–æ–¥–µ–ª–∏–ª–∞—Å—å –Ω–∞ "–¥–æ" –∏ "–ø–æ—Å–ª–µ".
                             –Ø –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–Ω—è–ª–∞, —á—Ç–æ –º–æ—è –∂–∏–∑–Ω—å –æ—á–µ–Ω—å –≤–µ—Å–µ–ª–∞—è. 
                             –ö–æ–≥–¥–∞ –∂–µ —É –º–µ–Ω—è –Ω–µ–¥–µ–ª—é –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø—Ä–∏ –ø–æ–º–æ—â–∏ –±–æ—Ç–∞ —è —Å—Ä–∞–∑—É —ç—Ç–æ –ø–æ–Ω–∏–º–∞—é –∏ —Ç—É—Ç –∂–µ –±–µ—Ä—É –æ—Ç–ø—É—Å–∫ –∏ —É–ª–µ—Ç–∞—é –Ω–∞ –ë–∞–ª–∏.
                             –ê –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –æ—á–µ–Ω—å 3 –Ω–µ–¥–µ–ª–∏, —è –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è—é —Ä–∞–±–æ—Ç—É, –≤—Å–µ –ø—Ä–æ—Å—Ç–æ! –í—Å–µ –ø—Ä–æ—Å—Ç–æ —Å –±–æ—Ç–æ–º MoodCheckingBot!
                             ''', reply_markup=menu_keyboard)

    #–∑–∞–ø–∏—Å—ã–≤–∞–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –±–∞–∑—É

    #–æ–ø–µ—Ä–µ–¥–ª—è–µ–º insert –∏–ª–∏ update
    def check_recording(user_id, dt):
        conn = sqlite3.connect('mood.db')
        cur = conn.cursor()
        cur.execute(f'''
                    SELECT count(*)
                    FROM mood_status
                    where userid = {user_id}
                    and date = '{dt}'
                    ''')
        recording_cnt = cur.fetchall()[0][0]
        if recording_cnt == 0:
            return 'insert'
        #else:
            #action_type = 'update'

    def check_today_mood(message):
        print('check_today_mood')
        if message.text in mood_list:
            user_id = message.from_user.id
            global dt
            dt = date.today()
            status = mood_dict[message.text.lower()]

            conn = sqlite3.connect('mood.db')
            cur = conn.cursor()
            #insert new
            if check_recording(user_id, dt) == 'insert':

                cur.execute(f'''
                        INSERT INTO mood_status(userid, date, status) 
                           VALUES({user_id}, '{dt}', '{status}')
                           ''')
                conn.commit()
                msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reply_markup=comment_keyboard)
                bot.register_next_step_handler(msg, get_analyse)
            #update old
            else:
                cur.execute(f'''
                        update mood_status
                        set status = '{status}'
                        where userid = {user_id}
                        and date = '{dt}'
                        ''')
                conn.commit()
                msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reply_markup=comment_keyboard)
                bot.register_next_step_handler(msg, add_commentary)

    def check_old_mood(message):
        print('check_old_mood')
        if message.text.lower() in mood_list:
            #–≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞, –ø–æ—Ç–æ–º —Å—Ç–∞—Ç—É—Å
            try:
                user_id = message.from_user.id
                global dt
                dt = update_dt
                status = mood_dict[message.text.lower()]

                conn = sqlite3.connect('mood.db')
                cur = conn.cursor()

                if check_recording(user_id, dt) == 'insert':
                    cur.execute(f'''
                            INSERT INTO mood_status(userid, date, status) 
                               VALUES({user_id}, '{dt}', '{status}')
                               ''')
                    conn.commit()
                    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reply_markup=comment_keyboard)
                    bot.register_next_step_handler(msg, add_commentary)
                else:
                    cur.execute(f'''
                            update mood_status
                            set status = '{status}'
                            where userid = {user_id}
                            and date = '{dt}'
                            ''')
                    conn.commit()
                    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', reply_markup=comment_keyboard)
                    bot.register_next_step_handler(msg, add_commentary)
            except:
                calendar, step = DetailedTelegramCalendar(max_date=date.today()).build()
                bot.send_message(message.chat.id, f"Select {LSTEP[step]}", reply_markup=calendar)
                msg = bot.send_message(message.chat.id,
                                       '''–ù–µ —Ç–∞–∫, –≤—ã–±–µ—Ä–∏ –°–ù–ê–ß–ê–õ–ê –î–ê–¢–£, –ø–æ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–æ –≤ —Ç–æ—Ç –¥–µ–Ω—å, –≤–∞–Ω –º–æ —Ç—Ä–∞–π''',
                                       reply_markup=mood_keyboard)
                bot.register_next_step_handler(msg, check_old_mood)


    #–¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    def add_commentary(message):
        if message.text == '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤':
            bot.send_message(message.chat.id, '–ù—É –ª–∞–¥–Ω–æ. –í—Å–µ –∑–∞–ø–∏—Å–∞–ª', reply_markup=menu_keyboard)
        else:
            user_id = message.from_user.id
            commentary = message.text
            conn = sqlite3.connect('mood.db')
            cur = conn.cursor()
            cur.execute(f'''
                update mood_status
                set commentary = '{commentary}'
                where userid = {user_id}
                and date = '{dt}'
                        ''')
            conn.commit()
            bot.send_message(message.chat.id, '–í—Å–µ –∑–∞–ø–∏—Å–∞–ª', reply_markup=menu_keyboard)


    def get_interval(message):
        global interval_cnt
        if message.text == '–∑–∞ 10 –¥–Ω–µ–π':
            interval_cnt = 10
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∏–¥ –∞–Ω–∞–ª–∏–∑–∞', reply_markup=analyse_keyboard)
            bot.register_next_step_handler(msg, get_analyse)
        elif message.text == '–∑–∞ 30 –¥–Ω–µ–π':
            interval_cnt = 30
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∏–¥ –∞–Ω–∞–ª–∏–∑–∞', reply_markup=analyse_keyboard)
            bot.register_next_step_handler(msg, get_analyse)
        elif message.text == '–∑–∞ 90 –¥–Ω–µ–π':
            interval_cnt = 90
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∏–¥ –∞–Ω–∞–ª–∏–∑–∞', reply_markup=analyse_keyboard)
            bot.register_next_step_handler(msg, get_analyse)
        elif message.text == '–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è':
            interval_cnt = 9999
            msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –≤–∏–¥ –∞–Ω–∞–ª–∏–∑–∞', reply_markup=analyse_keyboard)
            bot.register_next_step_handler(msg, get_analyse)


    def get_analyse(message):
        if message.text == 'Simple row':
            user_id = message.from_user.id
            simple_output = ''
            end_dt = date.today()
            start_dt = date.today() + timedelta(days=-interval_cnt+1)
            print(start_dt)

            conn = sqlite3.connect('mood.db')
            cur = conn.cursor()
            cur.execute(f'''
                with 
                t0 as (
                select 
                start_dt, 
                cast(julianday('{end_dt}') - julianday(start_dt) as integer) nn
                from (
                    select 
                    case 
                        when {interval_cnt} > 100 and min(date) > '{start_dt}' then '{start_dt}'
                        when {interval_cnt} > 100 and min(date) <= '{start_dt}' then min(date) 
                        when {interval_cnt} < 100 and min(date) > '{start_dt}' then min(date)
                        else '{start_dt}'
                        end start_dt
                    from mood_status
                    where userid = {user_id}
                    and date!='-' 
                )),
    
                series(n) as (
                select 1 
                    union all
                select n+1 
                from series, t0 
                where n < nn
                ),
                
                t1 as (
                select n, '{end_dt}' dt, '-'|| (n-1) ||' day' param
                from series
                ), 
    
                t2 as (
                select date('{end_dt}', param) ndt
                from t1
                ),
    
                t3 as (
                select ndt,
                case when status is null then '-' else status end status
                from t2
                left join (select 
                            date, 
                            status 
                            from mood_status
                            where userid = {user_id}) tt on t2.ndt=tt.date
                )
    
                select status
                from t3 
                where ndt>= (select min(ndt) mdt from t3 where status != '-')
                order by ndt
                    ''')
            all_data = cur.fetchall()
            for i in all_data:
                for j in i:
                    emoji = mood_emoji_dict[j]
                    simple_output += emoji
            bot.send_message(message.chat.id, simple_output, reply_markup=menu_keyboard)

        elif message.text == 'AI analyse':
            user_id = message.from_user.id
            simple_output = ''
            end_dt = date.today()
            start_dt = date.today() + timedelta(days=-interval_cnt + 1)

            conn = sqlite3.connect('mood.db')
            cur = conn.cursor()
            cur.execute(f'''
                with 
                t0 as (
                select 
                start_dt, 
                cast(julianday('{end_dt}') - julianday(start_dt) as integer) nn
                from (
                    select 
                    case 
                        when {interval_cnt} > 100 and min(date) > '{start_dt}' then '{start_dt}'
                        when {interval_cnt} > 100 and min(date) <= '{start_dt}' then min(date) 
                        when {interval_cnt} < 100 and min(date) > '{start_dt}' then min(date)
                        else '{start_dt}'
                        end start_dt
                    from mood_status
                    where userid = {user_id}
                    and date!='-'
                )),
    
                series(n) as (
                select 1 
                    union all
                select n+1 
                from series, t0 
                where n < nn
                ),
    
                t1 as (
                select n, '{end_dt}' dt, '-'|| (n-1) ||' day' param
                from series
                ), 
    
                t2 as (
                select date('{end_dt}', param) ndt
                from t1
                ),
    
                t3 as (
                select ndt,
                case when status is null then '-' else status end status
                from t2
                left join (select 
                            date, 
                            status 
                            from mood_status
                            where userid = {user_id}) tt on t2.ndt=tt.date
                )
    
                select avg(status) avg_status
                from t3 
                where ndt>= (select min(ndt) mdt from t3 where status != '-')
                and status !='-'
                    ''')
            AI_result = int(cur.fetchall()[0][0])
            if AI_result <= 1:
                #bot.send_sticker(message.chat.id, 'You need help')
                bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIJUWADCE4YHpTTfFqttc-ggUruZSYlAAL4AwACierlByp3dvbJG_twHgQ',
                                 reply_markup=menu_keyboard)
            elif AI_result <= 2:
                #bot.send_sticker(message.chat.id, 'You are not okey')
                bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIJUGADCCIB5XTa4bJSjAlMoqcE5i-AAAJ0AQACD8emDmYg1q0EQ_rpHgQ',
                                 reply_markup=menu_keyboard)
            elif AI_result <= 3:
                #bot.send_sticker(message.chat.id, 'You are okey')
                bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIJT2ADB_u2RoLMvUZHi-eBrPuFu00vAAI8AQACD8emDlUQHmOieHlHHgQ',
                                 reply_markup=menu_keyboard)
            elif AI_result <= 4:
                #bot.send_sticker(message.chat.id, 'You are better than okey')
                bot.send_sticker(message.chat.id, 'CAACAgEAAxkBAAIJTWADBxZ61c23FVnXVbG9FHyctiI1AAIMAAOhBQwN78Ogo7d0iDEeBA',
                                 reply_markup=menu_keyboard)
            else:
                #bot.send_sticker(message.chat.id, 'You are super okey')
                bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIJTmADB9_CxJ3ymZ89OKC8IAJTOjdCAAJ-CAACXAJlA-ncQYpBipakHgQ',
                                 reply_markup=menu_keyboard)

        elif message.text == 'Chart':
            user_id = message.from_user.id
            end_dt = date.today()
            start_dt = date.today() + timedelta(days=-interval_cnt + 1)

            conn = sqlite3.connect('mood.db')
            df = pd.read_sql_query(f'''
                with 
                t0 as (
                select 
                start_dt, 
                cast(julianday('{end_dt}') - julianday(start_dt) as integer) nn
                from (
                    select 
                    case 
                        when {interval_cnt} > 100 and min(date) > '{start_dt}' then '{start_dt}'
                        when {interval_cnt} > 100 and min(date) <= '{start_dt}' then min(date) 
                        when {interval_cnt} < 100 and min(date) > '{start_dt}' then min(date)
                        else '{start_dt}'
                        end start_dt
                    from mood_status
                    where userid = {user_id}
                    and date!='-'
                )),
    
                series(n) as (
                select 1 
                    union all
                select n+1 
                from series, t0 
                where n < nn
                ),
    
                t1 as (
                select n, '{end_dt}' dt, '-'|| (n-1) ||' day' param
                from series
                ), 
    
                t2 as (
                select date('{end_dt}', param) ndt
                from t1
                ),
    
                t3 as (
                select ndt,
                case when status is null then null else status end status
                from t2
                left join (select 
                            date, 
                            status 
                            from mood_status
                            where userid = {user_id}) tt on t2.ndt=tt.date
                )
    
                select ndt Dates, cast(status as integer) Moods
                from t3 
                where ndt>= (select min(ndt) mdt from t3 where status != '-')
                order by ndt
                ''', conn)
            df.plot('Dates','Moods', kind='bar')
            plt.savefig('MoodDiagram.jpeg', dpi=100, bbox_inches='tight')
            bot.send_photo(message.chat.id, open('MoodDiagram.jpeg', 'rb'), reply_markup=menu_keyboard)

        elif message.text == 'Pie Chart':
            user_id = message.from_user.id
            end_dt = date.today()
            start_dt = date.today() + timedelta(days=-interval_cnt + 1)

            conn = sqlite3.connect('mood.db')
            df = pd.read_sql_query(f'''
                    with 
                    t0 as (
                    select 
                    start_dt, 
                    cast(julianday('{end_dt}') - julianday(start_dt) as integer) nn
                    from (
                        select 
                        case 
                            when {interval_cnt} > 100 and min(date) > '{start_dt}' then '{start_dt}'
                            when {interval_cnt} > 100 and min(date) <= '{start_dt}' then min(date) 
                            when {interval_cnt} < 100 and min(date) > '{start_dt}' then min(date)
                            else '{start_dt}'
                            end start_dt
                        from mood_status
                        where userid = {user_id}
                        and date!='-'
                    )),
        
                    series(n) as (
                    select 1 
                        union all
                    select n+1 
                    from series, t0 
                    where n < nn
                    ),
        
                    t1 as (
                    select n, '{end_dt}' dt, '-'|| (n-1) ||' day' param
                    from series
                    ), 
        
                    t2 as (
                    select date('{end_dt}', param) ndt
                    from t1
                    ),
        
                    t3 as (
                    select ndt,
                    case when status is null then null else status end status
                    from t2
                    left join (select 
                                date, 
                                status 
                                from mood_status
                                where userid = {user_id}) tt on t2.ndt=tt.date
                    )
        
                    select 
                    case 
                    when status = '1' then 'awful' 
                    when status = '2' then 'bad'
                    when status = '3' then 'okay'
                    when status = '4' then 'good'
                    else 'joyful'
                    end Moods, 
                    count(status) Percentage
                    from t3 
                    where status is not null
                    and ndt >= (select min(ndt) mdt from t3 where status != '-')
                    group by status
                    order by count(status)
                    ''', conn)
            status = df.Moods
            df.plot('Moods', 'Percentage', kind='pie', autopct='%1.1f%%', labels=None, title='–ù–∞–≥–ª—è–¥—ã–π –≥—Ä–∞—Ñ–∏–∫-–∫—Ä—É–∂–æ–∫', ylabel='').legend(status, loc='best')
            plt.savefig('MoodDiagram.jpeg', dpi=100, bbox_inches='tight')
            bot.send_photo(message.chat.id, open('MoodDiagram.jpeg', 'rb'), reply_markup=menu_keyboard)


    # –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è, –≤—ã–±–æ—Ä –¥–∞—Ç—ã
    @bot.callback_query_handler(func=DetailedTelegramCalendar.func())
    def cal(c):
        result, key, step = DetailedTelegramCalendar(max_date=date.today()).process(c.data)
        if not result and key:
            bot.edit_message_text(f"Select {LSTEP[step]}",
                                  c.message.chat.id,
                                  c.message.message_id,
                                  reply_markup=key)
        elif result:
            global update_dt
            update_dt = result


    @bot.message_handler(content_types=['document'])
    def handle_file(message):
        bot.send_message(message.chat.id, '–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é')

    bot.polling()
except Exception as e:
    print(e)
    print('restart')
    #os.system('python MoodCheckingBot_4.py 1')
